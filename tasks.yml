name: homepage
title: Enable the homepage.
description: |

  Your task is to enable home page on your website.

  * Fork the repository https://github.com/pipalacademy/rajdhani
  * Enable actions on your repo by visitng the Actions tab of your repo
  * Enable the home page on your website by setting the feature flag `flag_homepage = True`
  in the `rajdhani/config.py`.

  Once you commit and push your changes, your website will be updated.
checks:
  - check_flag:
      flag: flag_homepage
  - check_webpage_content:
      url: /
      expected_text: "<h2>Search Trains</h2>"
---
name: search-trains
title: Find trains on search
description: |
  The `search_trains` functions in the db module is called
  to find the matching trains from source station to destination
  when the user searches for trains. Currently, that function
  returns a placeholder result. Replace that with the correct
  implementation.

  For this task, you just need to focus on the `from_station` and
  `to_station` of the train and no need to support for the
  intermediate stations.

  File: `rajdhani/db.py`<br>
  Function: `search_trains`
checks:
  - check_search_trains:
      from_station: SBC
      to_station: MAS
      expected_trains:
        - 12028
        - 12608
        - 12640
        - 12658
        - 12610
---
name: search-trains-with-ticketclass
title: Support ticket class in train search
description: |
    Enable ticket class fields in the search form by setting
    `flag_ticketclass_in_search` in `config.py` to `True`.

    Update the `search_trains` function to consider only the trains
    that has that ticket class.

    File: `rajdhani/db.py` <br>
    Function: `search_trains`
checks:
  - check_flag:
      flag: flag_ticketclass_in_search
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      expected_trains:
        - "12009"
        - "12267"
        - "12901"
        - "12933"
        - "19011"
        - "59439"
        - "59441"
        - "09001"
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      ticket_class: SL
      expected_trains:
        - "12901"
        - "59439"
        - "59441"
        - "09001"
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      ticket_class: CC
      expected_trains:
        - "12009"
        - "12933"
        - "19011"

  - check_search_trains:
      from_station: BCT
      to_station: ADI
      ticket_class: 1A
      expected_trains:
        - "12009"
        - "12267"
        - "12901"
---
name: search-filters
title: Implement search filters
description: |
    Enable the filters on arrival time and departure time by setting
    the flag `flag_search_filters` to `True` in the `config.py`.

    Consider the arrival time and departure time filters when searching
    for trains.

    There are 5 time slots available and each one is represented with
    a string id.

    * Early Morning - midnight to 8:00 am (id=slot1)
    * Morning - 8:00 am to noon (id=slot2)
    * Afternoon - noon to 4:00pm (id=slot3)
    * Evening - 4:00 pm to 8:00pm (id=slot4)
    * Night - 4:00 pm to 8:00pm (id=slot5)

    The `search_trains` will get a list of slots for `departure_time`
    and `arrival_time`. If any slots are provided, then only training
    matching those constraints should be considered. When no slots are
    provided, all trains should be included.

    File: `rajdhani/db.py` <br>
    Function: `search_trains`
checks:
  - check_flag:
      flag: flag_search_filters
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      departure_time: "slot1"
      expected_trains:
        - "12009"
        - "19011"
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      departure_time: "slot5"
      expected_trains:
        - "12267"
        - "12901"
        - "59441"
        - "09001"
  - check_search_trains:
      from_station: BCT
      to_station: ADI
      departure_time: ["slot1", "slot5"]
      expected_trains:
        - "12009"
        - "19011"
        - "12267"
        - "12901"
        - "59441"
        - "09001"

  - check_search_trains:
      from_station: BCT
      to_station: ADI
      arrival_time: "slot1"
      expected_trains:
        - "12267"
        - "12901"
        - "59439"
        - "09001"

  - check_search_trains:
      from_station: BCT
      to_station: ADI
      ticket_class: 1A
      arrival_time: "slot1"
      expected_trains:
        - "12267"
        - "12901"
---
name: autocomplete
title: Implement the autocomplete on the home page.
description: |
  The autocomplete on the home page to select the from and to stations is
  a dummy implementation. Replace that with a correct implementation.

  You need to implement the `search_stations` function in `db.py`. It
  would get the text entered by user in the `from` or `to` autocomplete
  elements on the home page and you need to find all the stations that
  contain the entered text either in the station name or station code.
  Please remember that you need to this in a case insenstive way.

    File: `rajdhani/db.py` <br>
    Function: `search_stations`
checks:
  - check_autocomplete:
      q: sbc
      expected_stations:
        - SBC
  - check_autocomplete:
      q: bangal
      expected_stations:
        - SBC
        - BNCE
        - BNC
        - BJY
  - check_autocomplete:
      q: guntur
      expected_stations:
        - GNT
        - NGNT
  - check_autocomplete:
      q: cst
      expected_stations:
        - CSTM
  - check_autocomplete:
      q: chennai
      expected_stations:
        - MS
        - MSC
        - MAS
        - MPKT
        - MPK
        - MSF
        - MSB
---
name: train-schedule
title: Show schedule of a train
description: |
    Enable link to show the schedule of each train in the search results
    by setting the flag `flag_show_schedule_link` in the config to `True`.

    Implement the `get_train_schedule` function that takes the
    train number as argument and returns the schedule.

    File: `rajdhani/db.py` <br>
    Function: `get_train_schedule`
checks:
  - check_flag:
      flag: flag_show_schedule_link
  - check_schedule:
      train: 12028
      ensure_rows:
        - [SBC, BANGALORE CITY JN, "1", "-", "06:00"]
        - [BNC, BANGALORE CANT, "1", "06:08", "06:10"]
        - [BNCE, BANGALORE EAST, "1", "06:12", "06:12"]
        - [BYPL, BAIYYAPPANAHALI, "1", "06:15", "06:15"]
        - [BBQ, BASIN BRIDGE JN, "1", "10:59", "10:59"]
        - [MAS, CHENNAI CENTRAL, "1", "11:00", "-"]
  - check_schedule:
      train: 12628
      ensure_rows:
        - [NDLS, NEW DELHI, "1", "-", "21:15"]
        - [CSB, SHIVAJI BRIDGE, "1", "21:16", "21:16"]
        - [MTJ, MATHURA JN, "1", "23:08", "23:10"]
        - [BPL, BHOPAL JN, "2", "06:55", "07:00"]
        - [SBC, BANGALORE CITY JN, "3", "13:40", "-"]
# ---
# name: seat-availability
# title: Show availability of seats for each train
# description: |
#   Enable showing the number of seats available in each ticket class
#   for each train in the search results by setting the flag
#   `flag_seat_availability` in the config to `True`.

#   Implement the function `get_seat_availability` that takes the
#   train number as argument and returns the seat avaiblity for
#   each ticket class.

#   File: `rajdhani/db.py` <br>
#   Function: `get_seat_availability`
# checks:
#   - check_flag:
#       flag: flag_seat_availability
#   - check_not_implemented
---
name: book-ticket
title: Implement booking a ticket.
description: |
  Enable ticket booking by setting the flag
  `flag_ticket_booking` in the config to `True`.

  Implement the function `book_ticket` that takes train
  and passenger details and books a ticket by adding an entry
  in the database table.

  After booking a ticket, the number of available seats for that
  train in the booked ticket class should be reduced by one.

  File: `rajdhani/db.py` <br>
  Function: `book_ticket`
checks:
  - check_flag:
      flag: flag_bookings
  - check_booking:
      train_number: "12628"
      from_station_code: NDLS
      to_station_code: SBC
      passenger_name: Evalu Ator
      passenger_email: evalu@ator.dev
      ticket_class: 3A
      date: "2022-12-01"


---
name: email-conformation
title: Send an email to confirm the successful booking
description: |
  Send an email to the passenger confirming the reservation.

  File: `rajdhani/booking.py` <br>
  Function: `send_email_confirmation`
checks:
  - check_ticket_confirmation_email:
      train: "12028"
      ticket_class: "CC"
      date: "2022-09-30"
      passenger_name: "Eva Lu Ator"
      passenger_email: "evaluator@example.com"
  - check_ticket_confirmation_email:
      train: "16227"
      ticket_class: "FC"
      date: "2022-09-28"
      passenger_name: "Lem E Tweakit"
      passenger_email: "lemetweakit@example.com"
---
name: login-and-trips
title: Enable login and show trips for the user
description: |
  Enable login by enabling the flag `flag_login` and
  implement `get_trips` function.

  File: `rajdhani/db.py` <br>
  Function: `get_trips`
checks:
  - check_flag:
      flag: flag_login
  - check_get_trips:
      bookings:
        - {"train": "12028", "class": "CC", "date": "2022-09-25"}
        - {"train": "04728", "class": "3A", "date": "2022-09-28"}
